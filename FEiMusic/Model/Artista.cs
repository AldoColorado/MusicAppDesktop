/* 
 * FEIMusic API
 *
 * Api que nos permite administrar la aplicacion de musica FEIMusic
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FEiMusic.Client.SwaggerDateConverter;

namespace FEiMusic.Model
{
    /// <summary>
    /// Artista
    /// </summary>
    [DataContract]
        public partial class Artista :  IEquatable<Artista>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Artista" /> class.
        /// </summary>
        /// <param name="idArtista">idArtista.</param>
        /// <param name="nombreArtista">nombreArtista.</param>
        /// <param name="imagenArtista">imagenArtista.</param>
        /// <param name="descripcion">descripcion.</param>
        public Artista(string idArtista = default(string), string nombreArtista = default(string), string imagenArtista = default(string), string descripcion = default(string))
        {
            this.IdArtista = idArtista;
            this.NombreArtista = nombreArtista;
            this.ImagenArtista = imagenArtista;
            this.Descripcion = descripcion;
        }
        
        /// <summary>
        /// Gets or Sets IdArtista
        /// </summary>
        [DataMember(Name="idArtista", EmitDefaultValue=false)]
        public string IdArtista { get; set; }

        /// <summary>
        /// Gets or Sets NombreArtista
        /// </summary>
        [DataMember(Name="nombreArtista", EmitDefaultValue=false)]
        public string NombreArtista { get; set; }

        /// <summary>
        /// Gets or Sets ImagenArtista
        /// </summary>
        [DataMember(Name="imagenArtista", EmitDefaultValue=false)]
        public string ImagenArtista { get; set; }

        /// <summary>
        /// Gets or Sets Descripcion
        /// </summary>
        [DataMember(Name="descripcion", EmitDefaultValue=false)]
        public string Descripcion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Artista {\n");
            sb.Append("  IdArtista: ").Append(IdArtista).Append("\n");
            sb.Append("  NombreArtista: ").Append(NombreArtista).Append("\n");
            sb.Append("  ImagenArtista: ").Append(ImagenArtista).Append("\n");
            sb.Append("  Descripcion: ").Append(Descripcion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Artista);
        }

        /// <summary>
        /// Returns true if Artista instances are equal
        /// </summary>
        /// <param name="input">Instance of Artista to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Artista input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdArtista == input.IdArtista ||
                    (this.IdArtista != null &&
                    this.IdArtista.Equals(input.IdArtista))
                ) && 
                (
                    this.NombreArtista == input.NombreArtista ||
                    (this.NombreArtista != null &&
                    this.NombreArtista.Equals(input.NombreArtista))
                ) && 
                (
                    this.ImagenArtista == input.ImagenArtista ||
                    (this.ImagenArtista != null &&
                    this.ImagenArtista.Equals(input.ImagenArtista))
                ) && 
                (
                    this.Descripcion == input.Descripcion ||
                    (this.Descripcion != null &&
                    this.Descripcion.Equals(input.Descripcion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdArtista != null)
                    hashCode = hashCode * 59 + this.IdArtista.GetHashCode();
                if (this.NombreArtista != null)
                    hashCode = hashCode * 59 + this.NombreArtista.GetHashCode();
                if (this.ImagenArtista != null)
                    hashCode = hashCode * 59 + this.ImagenArtista.GetHashCode();
                if (this.Descripcion != null)
                    hashCode = hashCode * 59 + this.Descripcion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
